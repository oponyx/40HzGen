#include "settings.h"
#include "log.h"




TSettings Settings;

uint8_t SettingsRead(){
  EEPROM.begin(sizeof(TSettings));
  EEPROM.get(0,Settings);
  EEPROM.end();
  Serial.println("Configuration loaded");
  return 0;
}

uint8_t SettingsWrite(){
  EEPROM.begin(sizeof(TSettings));

  EEPROM.put(0,Settings);
  EEPROM.commit();
  EEPROM.end();

  Serial.println("Configuration saved");
  return 0;
}

uint8_t restoreDefaultSettings(){
  Settings.version = SETTINGS_VERSION;
  Settings.flag01 = DEFAULT_FLAG01;
//  ((String)WIFI_DEFAULT_SSID).toCharArray(Settings.wifi_ssid,sizeof(WIFI_DEFAULT_SSID));
  strcpy(Settings.wifi_ssid,WIFI_DEFAULT_SSID);
//  ((String)WIFI_DEFAULT_PASSW).toCharArray(Settings.wifi_psw,sizeof(WIFI_DEFAULT_PASSW));
  strcpy(Settings.wifi_psw, WIFI_DEFAULT_PASSW);
//  ((String)AP_DEFAULT_SSID).toCharArray(Settings.ap_ssid,sizeof(AP_DEFAULT_SSID));
  strcpy(Settings.ap_ssid, AP_DEFAULT_SSID);
//  ((String)AP_DEFAULT_PASSW).toCharArray(Settings.ap_psw,sizeof(AP_DEFAULT_PASSW));
  strcpy(Settings.ap_psw, AP_DEFAULT_PASSW);
  Settings.light_freq = DEFAULT_LIGHT_FREQ;
  Settings.on_time = DEFAULT_ON_TIME;

  SettingsWrite();
  return 0;
}

/***
    Written by Christopher Andrews.
    CRC algorithm generated by pycrc, MIT licence ( https://github.com/tpircher/pycrc ).
    A CRC is a simple way of checking whether data has changed or become corrupted.
    This example calculates a CRC value directly on the EEPROM values.
    The purpose of this example is to highlight how the EEPROM object can be used just like an array.
***/

unsigned long eeprom_crc(void) {
  const unsigned long crc_table[16] = {
    0x00000000, 0x1db71064, 0x3b6e20c8, 0x26d930ac,
    0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
    0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
    0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c
  };
  unsigned long crc = ~0L;
  //int eeprom_len=(int) EEPROM.length();
//  for (int index = 0 ; index < (int)EEPROM.length()  ; ++index) {
  //skip starting 2 bytes conaining crc
  for (int index = 2 ; index < (int)EEPROM.length()  ; ++index) { 
    crc = crc_table[(crc ^ EEPROM[index]) & 0x0f] ^ (crc >> 4);
    crc = crc_table[(crc ^ (EEPROM[index] >> 4)) & 0x0f] ^ (crc >> 4);
    crc = ~crc;
    }
  return crc;
}


/*
// Load WLAN credentials from EEPROM 
void loadCredentials() {
  EEPROM.begin(512);
  EEPROM.get(0, ssid);
  EEPROM.get(0+sizeof(ssid), password);
  char ok[2+1];
  EEPROM.get(0+sizeof(ssid)+sizeof(password), ok);
  EEPROM.end();
  if (String(ok) != String("OK")) {
    ssid[0] = 0;
    password[0] = 0;
  }
  Serial.println("Recovered credentials:");
  Serial.println(ssid);
  Serial.println(strlen(password)>0?"********":"<no password>");
}

// Store WLAN credentials to EEPROM 
void saveCredentials() {
  EEPROM.begin(512);
  EEPROM.put(0, ssid);
  EEPROM.put(0+sizeof(ssid), password);
  char ok[2+1] = "OK";
  EEPROM.put(0+sizeof(ssid)+sizeof(password), ok);
  EEPROM.commit();
  EEPROM.end();
}
*/